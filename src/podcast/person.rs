use serde::{Deserialize, Deserializer};

/// Group (as defined by [Podcast Taxonomy Project](https://podcasttaxonomy.com/)) of [Person](crate::podcast::Person).
#[derive(Debug, PartialEq, Eq)]
pub enum PersonGroup {
    CreativeDirection,
    Cast,
    Writing,
    AudioProduction,
    AudioPostProduction,
    Administration,
    Visuals,
    Community,
    Misc,
    VideoProduction,
    VideoPostProduction,
    Other(String),
}

pub fn option_person_group<'de, D>(deserializer: D) -> Result<Option<PersonGroup>, D::Error>
where
    D: Deserializer<'de>,
{
    let s = match String::deserialize(deserializer) {
        Ok(s) => s,
        Err(e) => return Err(e),
    };

    match s.to_lowercase().as_str() {
        "creative direction" => Ok(Some(PersonGroup::CreativeDirection)),
        "cast" => Ok(Some(PersonGroup::Cast)),
        "writing" => Ok(Some(PersonGroup::Writing)),
        "audio production" => Ok(Some(PersonGroup::AudioProduction)),
        "audio post-production" => Ok(Some(PersonGroup::AudioPostProduction)),
        "administration" => Ok(Some(PersonGroup::Administration)),
        "visuals" => Ok(Some(PersonGroup::Visuals)),
        "community" => Ok(Some(PersonGroup::Community)),
        "misc" => Ok(Some(PersonGroup::Misc)),
        "video production" => Ok(Some(PersonGroup::VideoProduction)),
        "video post-production" => Ok(Some(PersonGroup::VideoPostProduction)),
        _ => Ok(Some(PersonGroup::Other(s))),
    }
}

/// Role (as defined by [Podcast Taxonomy Project](https://podcasttaxonomy.com/)) of [Person](crate::podcast::Person).
#[derive(Debug, PartialEq, Eq)]
pub enum PersonRole {
    Director,
    AssistantDirector,
    ExecutiveProducer,
    SeniorProducer,
    Producer,
    AssociateProducer,
    DevelopmentProducer,
    CreativeDirector,
    Host,
    CoHost,
    GuestHost,
    Guest,
    VoiceActor,
    Narrator,
    Announcer,
    Reporter,
    Author,
    EditorialDirector,
    CoWriter,
    Writer,
    Songwriter,
    GuestWriter,
    StoryEditor,
    ManagingEditor,
    ScriptEditor,
    ScriptCoordinator,
    Researcher,
    Editor,
    FactChecker,
    Translator,
    Transcriber,
    Logger,
    StudioCoordinator,
    TechnicalDirector,
    TechnicalManager,
    AudioEngineer,
    RemoteRecordingEngineer,
    PostProductionEngineer,
    AudioEditor,
    SoundDesigner,
    FoleyArtist,
    Composer,
    ThemeMusic,
    MusicProduction,
    MusicContributor,
    ProductionCoordinator,
    BookingCoordinator,
    ProductionAssistant,
    ContentManager,
    MarketingManager,
    SalesRepresentative,
    SalesManager,
    GraphicDesigner,
    CoverArtDesigner,
    SocialMediaManager,
    Consultant,
    Intern,
    CameraOperator,
    LightingDesigner,
    CameraGrip,
    AssistantCamera,
    AssistantEditor,
    Other(String),
}

pub fn option_person_role<'de, D>(deserializer: D) -> Result<Option<PersonRole>, D::Error>
where
    D: Deserializer<'de>,
{
    let s = match String::deserialize(deserializer) {
        Ok(s) => s,
        Err(e) => return Err(e),
    };

    match s.to_lowercase().as_str() {
        "director" => Ok(Some(PersonRole::Director)),
        "assistant director" => Ok(Some(PersonRole::AssistantDirector)),
        "executive producer" => Ok(Some(PersonRole::ExecutiveProducer)),
        "senior producer" => Ok(Some(PersonRole::SeniorProducer)),
        "producer" => Ok(Some(PersonRole::Producer)),
        "associate producer" => Ok(Some(PersonRole::AssociateProducer)),
        "development producer" => Ok(Some(PersonRole::DevelopmentProducer)),
        "creative director" => Ok(Some(PersonRole::CreativeDirector)),
        "host" => Ok(Some(PersonRole::Host)),
        "co-host" => Ok(Some(PersonRole::CoHost)),
        "guest host" => Ok(Some(PersonRole::GuestHost)),
        "guest" => Ok(Some(PersonRole::Guest)),
        "voice actor" => Ok(Some(PersonRole::VoiceActor)),
        "narrator" => Ok(Some(PersonRole::Narrator)),
        "announcer" => Ok(Some(PersonRole::Announcer)),
        "reporter" => Ok(Some(PersonRole::Reporter)),
        "author" => Ok(Some(PersonRole::Author)),
        "editorial director" => Ok(Some(PersonRole::EditorialDirector)),
        "co-writer" => Ok(Some(PersonRole::CoWriter)),
        "writer" => Ok(Some(PersonRole::Writer)),
        "songwriter" => Ok(Some(PersonRole::Songwriter)),
        "guest writer" => Ok(Some(PersonRole::GuestWriter)),
        "story editor" => Ok(Some(PersonRole::StoryEditor)),
        "managing editor" => Ok(Some(PersonRole::ManagingEditor)),
        "script editor" => Ok(Some(PersonRole::ScriptEditor)),
        "script coordinator" => Ok(Some(PersonRole::ScriptCoordinator)),
        "researcher" => Ok(Some(PersonRole::Researcher)),
        "editor" => Ok(Some(PersonRole::Editor)),
        "fact checker" => Ok(Some(PersonRole::FactChecker)),
        "translator" => Ok(Some(PersonRole::Translator)),
        "transcriber" => Ok(Some(PersonRole::Transcriber)),
        "logger" => Ok(Some(PersonRole::Logger)),
        "studio coordinator" => Ok(Some(PersonRole::StudioCoordinator)),
        "technical director" => Ok(Some(PersonRole::TechnicalDirector)),
        "technical manager" => Ok(Some(PersonRole::TechnicalManager)),
        "audio engineer" => Ok(Some(PersonRole::AudioEngineer)),
        "remote recording engineer" => Ok(Some(PersonRole::RemoteRecordingEngineer)),
        "post production engineer" => Ok(Some(PersonRole::PostProductionEngineer)),
        "audio editor" => Ok(Some(PersonRole::AudioEditor)),
        "sound designer" => Ok(Some(PersonRole::SoundDesigner)),
        "foley artist" => Ok(Some(PersonRole::FoleyArtist)),
        "composer" => Ok(Some(PersonRole::Composer)),
        "theme music" => Ok(Some(PersonRole::ThemeMusic)),
        "music production" => Ok(Some(PersonRole::MusicProduction)),
        "music contributor" => Ok(Some(PersonRole::MusicContributor)),
        "production coordinator" => Ok(Some(PersonRole::ProductionCoordinator)),
        "booking coordinator" => Ok(Some(PersonRole::BookingCoordinator)),
        "production assistant" => Ok(Some(PersonRole::ProductionAssistant)),
        "content manager" => Ok(Some(PersonRole::ContentManager)),
        "marketing manager" => Ok(Some(PersonRole::MarketingManager)),
        "sales representative" => Ok(Some(PersonRole::SalesRepresentative)),
        "sales manager" => Ok(Some(PersonRole::SalesManager)),
        "graphic designer" => Ok(Some(PersonRole::GraphicDesigner)),
        "cover art designer" => Ok(Some(PersonRole::CoverArtDesigner)),
        "social media manager" => Ok(Some(PersonRole::SocialMediaManager)),
        "consultant" => Ok(Some(PersonRole::Consultant)),
        "intern" => Ok(Some(PersonRole::Intern)),
        "camera operator" => Ok(Some(PersonRole::CameraOperator)),
        "lighting designer" => Ok(Some(PersonRole::LightingDesigner)),
        "camera grip" => Ok(Some(PersonRole::CameraGrip)),
        "assistant camera" => Ok(Some(PersonRole::AssistantCamera)),
        "assistant editor" => Ok(Some(PersonRole::AssistantEditor)),
        _ => Ok(Some(PersonRole::Other(s))),
    }
}
